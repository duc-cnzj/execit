syntax = "proto3";

package cluster;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "model/model.proto";

option go_package = "github.com/duc-cnzj/execit-client/cluster;cluster";

message ListRequest {
  int64 page = 1 [(validate.rules).int64.gt = 0];
  int64 page_size = 2 [(validate.rules).int64.gt = 0];
}
message ListResponse {
  int64 page = 1;
  int64 page_size = 2;
  int64 count = 3;
  repeated model.ClusterModel items = 4;
}

message CreateRequest {
  string name = 1 [(validate.rules).string.min_bytes = 1];
  string kube_config = 2 [(validate.rules).string.min_bytes = 1];
  string namespace = 3;
}

message CreateResponse {
  int64 id = 1;
  string name = 2;
  string created_at = 4;
  string updated_at = 5;
  string deleted_at = 6;
}

message ShowRequest {
  int64 cluster_id = 1 [(validate.rules).int64.gt = 0];
}
message ShowResponse {
  int64 id = 1;
  string name = 2;
  string kube_config = 3;
  string api_server_url = 4;
  string created_at = 5;
  string updated_at = 6;
  string deleted_at = 7;

  repeated Items items = 8;
  //  map<string, ClusterItems> items = 8;
}

message Item {
  string namespace = 1;
  string type = 2;
  string name = 3;
  bool enabled = 4;
  int64 cluster_id = 5;
  int64 card_id = 6;
}

message Items {
  string namespace = 1;
  repeated Item items = 2;
}

message DeleteRequest {
  int64 cluster_id = 1 [(validate.rules).int64.gt = 0];
}
message DeleteResponse {}

service ClusterSvc {
  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/api/clusters"
    };
  }

  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/api/clusters",
      body: "*"
    };
  }

  rpc Show(ShowRequest) returns (ShowResponse) {
    option (google.api.http) = {
      get: "/api/clusters/{cluster_id}"
    };
  }

  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/api/clusters/{cluster_id}"
    };
  }
}