// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: file/file.proto

package file

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileDeleteRequestMultiError, or nil if none found.
func (m *FileDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := FileDeleteRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FileDeleteRequestMultiError(errors)
	}

	return nil
}

// FileDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by FileDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type FileDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileDeleteRequestMultiError) AllErrors() []error { return m }

// FileDeleteRequestValidationError is the validation error returned by
// FileDeleteRequest.Validate if the designated constraints aren't met.
type FileDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileDeleteRequestValidationError) ErrorName() string {
	return "FileDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileDeleteRequestValidationError{}

// Validate checks the field values on FileDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileDeleteResponseMultiError, or nil if none found.
func (m *FileDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FileDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileDeleteResponseValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileDeleteResponseValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileDeleteResponseValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileDeleteResponseMultiError(errors)
	}

	return nil
}

// FileDeleteResponseMultiError is an error wrapping multiple validation errors
// returned by FileDeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type FileDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileDeleteResponseMultiError) AllErrors() []error { return m }

// FileDeleteResponseValidationError is the validation error returned by
// FileDeleteResponse.Validate if the designated constraints aren't met.
type FileDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileDeleteResponseValidationError) ErrorName() string {
	return "FileDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FileDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileDeleteResponseValidationError{}

// Validate checks the field values on DeleteUndocumentedFilesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUndocumentedFilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUndocumentedFilesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteUndocumentedFilesRequestMultiError, or nil if none found.
func (m *DeleteUndocumentedFilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUndocumentedFilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUndocumentedFilesRequestMultiError(errors)
	}

	return nil
}

// DeleteUndocumentedFilesRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteUndocumentedFilesRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteUndocumentedFilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUndocumentedFilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUndocumentedFilesRequestMultiError) AllErrors() []error { return m }

// DeleteUndocumentedFilesRequestValidationError is the validation error
// returned by DeleteUndocumentedFilesRequest.Validate if the designated
// constraints aren't met.
type DeleteUndocumentedFilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUndocumentedFilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUndocumentedFilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUndocumentedFilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUndocumentedFilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUndocumentedFilesRequestValidationError) ErrorName() string {
	return "DeleteUndocumentedFilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUndocumentedFilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUndocumentedFilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUndocumentedFilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUndocumentedFilesRequestValidationError{}

// Validate checks the field values on File with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on File with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FileMultiError, or nil if none found.
func (m *File) ValidateAll() error {
	return m.validate(true)
}

func (m *File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for HumanizeSize

	// no validation rules for Size

	// no validation rules for UploadBy

	if len(errors) > 0 {
		return FileMultiError(errors)
	}

	return nil
}

// FileMultiError is an error wrapping multiple validation errors returned by
// File.ValidateAll() if the designated constraints aren't met.
type FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileMultiError) AllErrors() []error { return m }

// FileValidationError is the validation error returned by File.Validate if the
// designated constraints aren't met.
type FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileValidationError) ErrorName() string { return "FileValidationError" }

// Error satisfies the builtin error interface
func (e FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileValidationError{}

// Validate checks the field values on DeleteUndocumentedFilesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUndocumentedFilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUndocumentedFilesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteUndocumentedFilesResponseMultiError, or nil if none found.
func (m *DeleteUndocumentedFilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUndocumentedFilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteUndocumentedFilesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteUndocumentedFilesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteUndocumentedFilesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteUndocumentedFilesResponseMultiError(errors)
	}

	return nil
}

// DeleteUndocumentedFilesResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteUndocumentedFilesResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteUndocumentedFilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUndocumentedFilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUndocumentedFilesResponseMultiError) AllErrors() []error { return m }

// DeleteUndocumentedFilesResponseValidationError is the validation error
// returned by DeleteUndocumentedFilesResponse.Validate if the designated
// constraints aren't met.
type DeleteUndocumentedFilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUndocumentedFilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUndocumentedFilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUndocumentedFilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUndocumentedFilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUndocumentedFilesResponseValidationError) ErrorName() string {
	return "DeleteUndocumentedFilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUndocumentedFilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUndocumentedFilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUndocumentedFilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUndocumentedFilesResponseValidationError{}

// Validate checks the field values on DiskInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiskInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiskInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiskInfoRequestMultiError, or nil if none found.
func (m *DiskInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DiskInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DiskInfoRequestMultiError(errors)
	}

	return nil
}

// DiskInfoRequestMultiError is an error wrapping multiple validation errors
// returned by DiskInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type DiskInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiskInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiskInfoRequestMultiError) AllErrors() []error { return m }

// DiskInfoRequestValidationError is the validation error returned by
// DiskInfoRequest.Validate if the designated constraints aren't met.
type DiskInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiskInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiskInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiskInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiskInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiskInfoRequestValidationError) ErrorName() string { return "DiskInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e DiskInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiskInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiskInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiskInfoRequestValidationError{}

// Validate checks the field values on DiskInfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiskInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiskInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiskInfoResponseMultiError, or nil if none found.
func (m *DiskInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DiskInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Usage

	// no validation rules for HumanizeUsage

	if len(errors) > 0 {
		return DiskInfoResponseMultiError(errors)
	}

	return nil
}

// DiskInfoResponseMultiError is an error wrapping multiple validation errors
// returned by DiskInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type DiskInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiskInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiskInfoResponseMultiError) AllErrors() []error { return m }

// DiskInfoResponseValidationError is the validation error returned by
// DiskInfoResponse.Validate if the designated constraints aren't met.
type DiskInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiskInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiskInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiskInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiskInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiskInfoResponseValidationError) ErrorName() string { return "DiskInfoResponseValidationError" }

// Error satisfies the builtin error interface
func (e DiskInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiskInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiskInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiskInfoResponseValidationError{}

// Validate checks the field values on FileListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileListRequestMultiError, or nil if none found.
func (m *FileListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := FileListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 1 {
		err := FileListRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WithoutDeleted

	if len(errors) > 0 {
		return FileListRequestMultiError(errors)
	}

	return nil
}

// FileListRequestMultiError is an error wrapping multiple validation errors
// returned by FileListRequest.ValidateAll() if the designated constraints
// aren't met.
type FileListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileListRequestMultiError) AllErrors() []error { return m }

// FileListRequestValidationError is the validation error returned by
// FileListRequest.Validate if the designated constraints aren't met.
type FileListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileListRequestValidationError) ErrorName() string { return "FileListRequestValidationError" }

// Error satisfies the builtin error interface
func (e FileListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileListRequestValidationError{}

// Validate checks the field values on FileListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileListResponseMultiError, or nil if none found.
func (m *FileListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FileListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return FileListResponseMultiError(errors)
	}

	return nil
}

// FileListResponseMultiError is an error wrapping multiple validation errors
// returned by FileListResponse.ValidateAll() if the designated constraints
// aren't met.
type FileListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileListResponseMultiError) AllErrors() []error { return m }

// FileListResponseValidationError is the validation error returned by
// FileListResponse.Validate if the designated constraints aren't met.
type FileListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileListResponseValidationError) ErrorName() string { return "FileListResponseValidationError" }

// Error satisfies the builtin error interface
func (e FileListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileListResponseValidationError{}
