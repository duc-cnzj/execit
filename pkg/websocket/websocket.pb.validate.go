// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: websocket/websocket.proto

package websocket

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WsRequestMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WsRequestMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WsRequestMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WsRequestMetadataMultiError, or nil if none found.
func (m *WsRequestMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *WsRequestMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return WsRequestMetadataMultiError(errors)
	}

	return nil
}

// WsRequestMetadataMultiError is an error wrapping multiple validation errors
// returned by WsRequestMetadata.ValidateAll() if the designated constraints
// aren't met.
type WsRequestMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WsRequestMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WsRequestMetadataMultiError) AllErrors() []error { return m }

// WsRequestMetadataValidationError is the validation error returned by
// WsRequestMetadata.Validate if the designated constraints aren't met.
type WsRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WsRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WsRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WsRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WsRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WsRequestMetadataValidationError) ErrorName() string {
	return "WsRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e WsRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWsRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WsRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WsRequestMetadataValidationError{}

// Validate checks the field values on AuthorizeTokenInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizeTokenInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizeTokenInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizeTokenInputMultiError, or nil if none found.
func (m *AuthorizeTokenInput) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizeTokenInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Token

	if len(errors) > 0 {
		return AuthorizeTokenInputMultiError(errors)
	}

	return nil
}

// AuthorizeTokenInputMultiError is an error wrapping multiple validation
// errors returned by AuthorizeTokenInput.ValidateAll() if the designated
// constraints aren't met.
type AuthorizeTokenInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizeTokenInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizeTokenInputMultiError) AllErrors() []error { return m }

// AuthorizeTokenInputValidationError is the validation error returned by
// AuthorizeTokenInput.Validate if the designated constraints aren't met.
type AuthorizeTokenInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeTokenInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeTokenInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeTokenInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeTokenInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeTokenInputValidationError) ErrorName() string {
	return "AuthorizeTokenInputValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeTokenInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeTokenInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeTokenInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeTokenInputValidationError{}

// Validate checks the field values on TerminalMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TerminalMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TerminalMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TerminalMessageMultiError, or nil if none found.
func (m *TerminalMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *TerminalMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Op

	// no validation rules for Data

	// no validation rules for SessionId

	// no validation rules for Rows

	// no validation rules for Cols

	if len(errors) > 0 {
		return TerminalMessageMultiError(errors)
	}

	return nil
}

// TerminalMessageMultiError is an error wrapping multiple validation errors
// returned by TerminalMessage.ValidateAll() if the designated constraints
// aren't met.
type TerminalMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerminalMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerminalMessageMultiError) AllErrors() []error { return m }

// TerminalMessageValidationError is the validation error returned by
// TerminalMessage.Validate if the designated constraints aren't met.
type TerminalMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerminalMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerminalMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerminalMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerminalMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerminalMessageValidationError) ErrorName() string { return "TerminalMessageValidationError" }

// Error satisfies the builtin error interface
func (e TerminalMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerminalMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerminalMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerminalMessageValidationError{}

// Validate checks the field values on TerminalMessageInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TerminalMessageInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TerminalMessageInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TerminalMessageInputMultiError, or nil if none found.
func (m *TerminalMessageInput) ValidateAll() error {
	return m.validate(true)
}

func (m *TerminalMessageInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TerminalMessageInputValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TerminalMessageInputValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TerminalMessageInputValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TerminalMessageInputMultiError(errors)
	}

	return nil
}

// TerminalMessageInputMultiError is an error wrapping multiple validation
// errors returned by TerminalMessageInput.ValidateAll() if the designated
// constraints aren't met.
type TerminalMessageInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerminalMessageInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerminalMessageInputMultiError) AllErrors() []error { return m }

// TerminalMessageInputValidationError is the validation error returned by
// TerminalMessageInput.Validate if the designated constraints aren't met.
type TerminalMessageInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerminalMessageInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerminalMessageInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerminalMessageInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerminalMessageInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerminalMessageInputValidationError) ErrorName() string {
	return "TerminalMessageInputValidationError"
}

// Error satisfies the builtin error interface
func (e TerminalMessageInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerminalMessageInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerminalMessageInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerminalMessageInputValidationError{}

// Validate checks the field values on WsHandleExecShellInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WsHandleExecShellInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WsHandleExecShellInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WsHandleExecShellInputMultiError, or nil if none found.
func (m *WsHandleExecShellInput) ValidateAll() error {
	return m.validate(true)
}

func (m *WsHandleExecShellInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for ClusterId

	// no validation rules for Namespace

	// no validation rules for Pod

	// no validation rules for Container

	if len(errors) > 0 {
		return WsHandleExecShellInputMultiError(errors)
	}

	return nil
}

// WsHandleExecShellInputMultiError is an error wrapping multiple validation
// errors returned by WsHandleExecShellInput.ValidateAll() if the designated
// constraints aren't met.
type WsHandleExecShellInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WsHandleExecShellInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WsHandleExecShellInputMultiError) AllErrors() []error { return m }

// WsHandleExecShellInputValidationError is the validation error returned by
// WsHandleExecShellInput.Validate if the designated constraints aren't met.
type WsHandleExecShellInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WsHandleExecShellInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WsHandleExecShellInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WsHandleExecShellInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WsHandleExecShellInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WsHandleExecShellInputValidationError) ErrorName() string {
	return "WsHandleExecShellInputValidationError"
}

// Error satisfies the builtin error interface
func (e WsHandleExecShellInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWsHandleExecShellInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WsHandleExecShellInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WsHandleExecShellInputValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uid

	// no validation rules for Slug

	// no validation rules for Type

	// no validation rules for End

	// no validation rules for Result

	// no validation rules for To

	// no validation rules for Data

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on Container with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Container) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Container with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerMultiError, or nil
// if none found.
func (m *Container) ValidateAll() error {
	return m.validate(true)
}

func (m *Container) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Pod

	// no validation rules for Container

	// no validation rules for ClusterId

	if len(errors) > 0 {
		return ContainerMultiError(errors)
	}

	return nil
}

// ContainerMultiError is an error wrapping multiple validation errors returned
// by Container.ValidateAll() if the designated constraints aren't met.
type ContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerMultiError) AllErrors() []error { return m }

// ContainerValidationError is the validation error returned by
// Container.Validate if the designated constraints aren't met.
type ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerValidationError) ErrorName() string { return "ContainerValidationError" }

// Error satisfies the builtin error interface
func (e ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerValidationError{}

// Validate checks the field values on WsMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WsMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WsMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WsMetadataResponseMultiError, or nil if none found.
func (m *WsMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WsMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsMetadataResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsMetadataResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsMetadataResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WsMetadataResponseMultiError(errors)
	}

	return nil
}

// WsMetadataResponseMultiError is an error wrapping multiple validation errors
// returned by WsMetadataResponse.ValidateAll() if the designated constraints
// aren't met.
type WsMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WsMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WsMetadataResponseMultiError) AllErrors() []error { return m }

// WsMetadataResponseValidationError is the validation error returned by
// WsMetadataResponse.Validate if the designated constraints aren't met.
type WsMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WsMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WsMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WsMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WsMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WsMetadataResponseValidationError) ErrorName() string {
	return "WsMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WsMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWsMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WsMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WsMetadataResponseValidationError{}

// Validate checks the field values on WsHandleShellResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WsHandleShellResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WsHandleShellResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WsHandleShellResponseMultiError, or nil if none found.
func (m *WsHandleShellResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WsHandleShellResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsHandleShellResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsHandleShellResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsHandleShellResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTerminalMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsHandleShellResponseValidationError{
					field:  "TerminalMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsHandleShellResponseValidationError{
					field:  "TerminalMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTerminalMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsHandleShellResponseValidationError{
				field:  "TerminalMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContainer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsHandleShellResponseValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsHandleShellResponseValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsHandleShellResponseValidationError{
				field:  "Container",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WsHandleShellResponseMultiError(errors)
	}

	return nil
}

// WsHandleShellResponseMultiError is an error wrapping multiple validation
// errors returned by WsHandleShellResponse.ValidateAll() if the designated
// constraints aren't met.
type WsHandleShellResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WsHandleShellResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WsHandleShellResponseMultiError) AllErrors() []error { return m }

// WsHandleShellResponseValidationError is the validation error returned by
// WsHandleShellResponse.Validate if the designated constraints aren't met.
type WsHandleShellResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WsHandleShellResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WsHandleShellResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WsHandleShellResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WsHandleShellResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WsHandleShellResponseValidationError) ErrorName() string {
	return "WsHandleShellResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WsHandleShellResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWsHandleShellResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WsHandleShellResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WsHandleShellResponseValidationError{}
