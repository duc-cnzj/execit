// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rbac/rbac.proto

package rbac

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserPermission with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPermission with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPermissionMultiError,
// or nil if none found.
func (m *UserPermission) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Permission

	// no validation rules for State

	// no validation rules for Reason

	// no validation rules for SubjectId

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return UserPermissionMultiError(errors)
	}

	return nil
}

// UserPermissionMultiError is an error wrapping multiple validation errors
// returned by UserPermission.ValidateAll() if the designated constraints
// aren't met.
type UserPermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPermissionMultiError) AllErrors() []error { return m }

// UserPermissionValidationError is the validation error returned by
// UserPermission.Validate if the designated constraints aren't met.
type UserPermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPermissionValidationError) ErrorName() string { return "UserPermissionValidationError" }

// Error satisfies the builtin error interface
func (e UserPermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPermissionValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 1 {
		err := ListRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	// no validation rules for Email

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListResponseMultiError, or
// nil if none found.
func (m *ListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return ListResponseMultiError(errors)
	}

	return nil
}

// ListResponseMultiError is an error wrapping multiple validation errors
// returned by ListResponse.ValidateAll() if the designated constraints aren't met.
type ListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResponseMultiError) AllErrors() []error { return m }

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

// Validate checks the field values on ApplyForRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplyForRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyForRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyForRequestMultiError, or nil if none found.
func (m *ApplyForRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyForRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSubjectId() < 0 {
		err := ApplyForRequestValidationError{
			field:  "SubjectId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Permission

	if len(errors) > 0 {
		return ApplyForRequestMultiError(errors)
	}

	return nil
}

// ApplyForRequestMultiError is an error wrapping multiple validation errors
// returned by ApplyForRequest.ValidateAll() if the designated constraints
// aren't met.
type ApplyForRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyForRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyForRequestMultiError) AllErrors() []error { return m }

// ApplyForRequestValidationError is the validation error returned by
// ApplyForRequest.Validate if the designated constraints aren't met.
type ApplyForRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyForRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyForRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyForRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyForRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyForRequestValidationError) ErrorName() string { return "ApplyForRequestValidationError" }

// Error satisfies the builtin error interface
func (e ApplyForRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyForRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyForRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyForRequestValidationError{}

// Validate checks the field values on ApplyForResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplyForResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyForResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyForResponseMultiError, or nil if none found.
func (m *ApplyForResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyForResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplyForResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplyForResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyForResponseValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplyForResponseMultiError(errors)
	}

	return nil
}

// ApplyForResponseMultiError is an error wrapping multiple validation errors
// returned by ApplyForResponse.ValidateAll() if the designated constraints
// aren't met.
type ApplyForResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyForResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyForResponseMultiError) AllErrors() []error { return m }

// ApplyForResponseValidationError is the validation error returned by
// ApplyForResponse.Validate if the designated constraints aren't met.
type ApplyForResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyForResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyForResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyForResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyForResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyForResponseValidationError) ErrorName() string { return "ApplyForResponseValidationError" }

// Error satisfies the builtin error interface
func (e ApplyForResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyForResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyForResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyForResponseValidationError{}

// Validate checks the field values on ApproveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApproveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApproveRequestMultiError,
// or nil if none found.
func (m *ApproveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := ApproveRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ApproveRequestMultiError(errors)
	}

	return nil
}

// ApproveRequestMultiError is an error wrapping multiple validation errors
// returned by ApproveRequest.ValidateAll() if the designated constraints
// aren't met.
type ApproveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveRequestMultiError) AllErrors() []error { return m }

// ApproveRequestValidationError is the validation error returned by
// ApproveRequest.Validate if the designated constraints aren't met.
type ApproveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveRequestValidationError) ErrorName() string { return "ApproveRequestValidationError" }

// Error satisfies the builtin error interface
func (e ApproveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveRequestValidationError{}

// Validate checks the field values on ApproveResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApproveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveResponseMultiError, or nil if none found.
func (m *ApproveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApproveResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApproveResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApproveResponseValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApproveResponseMultiError(errors)
	}

	return nil
}

// ApproveResponseMultiError is an error wrapping multiple validation errors
// returned by ApproveResponse.ValidateAll() if the designated constraints
// aren't met.
type ApproveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveResponseMultiError) AllErrors() []error { return m }

// ApproveResponseValidationError is the validation error returned by
// ApproveResponse.Validate if the designated constraints aren't met.
type ApproveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveResponseValidationError) ErrorName() string { return "ApproveResponseValidationError" }

// Error satisfies the builtin error interface
func (e ApproveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveResponseValidationError{}

// Validate checks the field values on NotApprovedReasonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotApprovedReasonRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotApprovedReasonRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotApprovedReasonRequestMultiError, or nil if none found.
func (m *NotApprovedReasonRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NotApprovedReasonRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSubjectId() < 0 {
		err := NotApprovedReasonRequestValidationError{
			field:  "SubjectId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Permission

	if len(errors) > 0 {
		return NotApprovedReasonRequestMultiError(errors)
	}

	return nil
}

// NotApprovedReasonRequestMultiError is an error wrapping multiple validation
// errors returned by NotApprovedReasonRequest.ValidateAll() if the designated
// constraints aren't met.
type NotApprovedReasonRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotApprovedReasonRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotApprovedReasonRequestMultiError) AllErrors() []error { return m }

// NotApprovedReasonRequestValidationError is the validation error returned by
// NotApprovedReasonRequest.Validate if the designated constraints aren't met.
type NotApprovedReasonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotApprovedReasonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotApprovedReasonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotApprovedReasonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotApprovedReasonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotApprovedReasonRequestValidationError) ErrorName() string {
	return "NotApprovedReasonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NotApprovedReasonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotApprovedReasonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotApprovedReasonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotApprovedReasonRequestValidationError{}

// Validate checks the field values on NotApprovedReasonResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotApprovedReasonResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotApprovedReasonResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotApprovedReasonResponseMultiError, or nil if none found.
func (m *NotApprovedReasonResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NotApprovedReasonResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reason

	if len(errors) > 0 {
		return NotApprovedReasonResponseMultiError(errors)
	}

	return nil
}

// NotApprovedReasonResponseMultiError is an error wrapping multiple validation
// errors returned by NotApprovedReasonResponse.ValidateAll() if the
// designated constraints aren't met.
type NotApprovedReasonResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotApprovedReasonResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotApprovedReasonResponseMultiError) AllErrors() []error { return m }

// NotApprovedReasonResponseValidationError is the validation error returned by
// NotApprovedReasonResponse.Validate if the designated constraints aren't met.
type NotApprovedReasonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotApprovedReasonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotApprovedReasonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotApprovedReasonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotApprovedReasonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotApprovedReasonResponseValidationError) ErrorName() string {
	return "NotApprovedReasonResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NotApprovedReasonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotApprovedReasonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotApprovedReasonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotApprovedReasonResponseValidationError{}

// Validate checks the field values on RejectRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RejectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RejectRequestMultiError, or
// nil if none found.
func (m *RejectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := RejectRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Reason

	if len(errors) > 0 {
		return RejectRequestMultiError(errors)
	}

	return nil
}

// RejectRequestMultiError is an error wrapping multiple validation errors
// returned by RejectRequest.ValidateAll() if the designated constraints
// aren't met.
type RejectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectRequestMultiError) AllErrors() []error { return m }

// RejectRequestValidationError is the validation error returned by
// RejectRequest.Validate if the designated constraints aren't met.
type RejectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectRequestValidationError) ErrorName() string { return "RejectRequestValidationError" }

// Error satisfies the builtin error interface
func (e RejectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectRequestValidationError{}

// Validate checks the field values on RejectResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RejectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RejectResponseMultiError,
// or nil if none found.
func (m *RejectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RejectResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RejectResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RejectResponseValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RejectResponseMultiError(errors)
	}

	return nil
}

// RejectResponseMultiError is an error wrapping multiple validation errors
// returned by RejectResponse.ValidateAll() if the designated constraints
// aren't met.
type RejectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectResponseMultiError) AllErrors() []error { return m }

// RejectResponseValidationError is the validation error returned by
// RejectResponse.Validate if the designated constraints aren't met.
type RejectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectResponseValidationError) ErrorName() string { return "RejectResponseValidationError" }

// Error satisfies the builtin error interface
func (e RejectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectResponseValidationError{}

// Validate checks the field values on RevokeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RevokeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RevokeRequestMultiError, or
// nil if none found.
func (m *RevokeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := RevokeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Reason

	if len(errors) > 0 {
		return RevokeRequestMultiError(errors)
	}

	return nil
}

// RevokeRequestMultiError is an error wrapping multiple validation errors
// returned by RevokeRequest.ValidateAll() if the designated constraints
// aren't met.
type RevokeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeRequestMultiError) AllErrors() []error { return m }

// RevokeRequestValidationError is the validation error returned by
// RevokeRequest.Validate if the designated constraints aren't met.
type RevokeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeRequestValidationError) ErrorName() string { return "RevokeRequestValidationError" }

// Error satisfies the builtin error interface
func (e RevokeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeRequestValidationError{}

// Validate checks the field values on RevokeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RevokeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RevokeResponseMultiError,
// or nil if none found.
func (m *RevokeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RevokeResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RevokeResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RevokeResponseValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RevokeResponseMultiError(errors)
	}

	return nil
}

// RevokeResponseMultiError is an error wrapping multiple validation errors
// returned by RevokeResponse.ValidateAll() if the designated constraints
// aren't met.
type RevokeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeResponseMultiError) AllErrors() []error { return m }

// RevokeResponseValidationError is the validation error returned by
// RevokeResponse.Validate if the designated constraints aren't met.
type RevokeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeResponseValidationError) ErrorName() string { return "RevokeResponseValidationError" }

// Error satisfies the builtin error interface
func (e RevokeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeResponseValidationError{}
