// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cluster/cluster.proto

package cluster

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ClusterListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterListRequestMultiError, or nil if none found.
func (m *ClusterListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ClusterListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := ClusterListRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClusterListRequestMultiError(errors)
	}

	return nil
}

// ClusterListRequestMultiError is an error wrapping multiple validation errors
// returned by ClusterListRequest.ValidateAll() if the designated constraints
// aren't met.
type ClusterListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterListRequestMultiError) AllErrors() []error { return m }

// ClusterListRequestValidationError is the validation error returned by
// ClusterListRequest.Validate if the designated constraints aren't met.
type ClusterListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterListRequestValidationError) ErrorName() string {
	return "ClusterListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterListRequestValidationError{}

// Validate checks the field values on ClusterListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterListResponseMultiError, or nil if none found.
func (m *ClusterListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Count

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterListResponseMultiError(errors)
	}

	return nil
}

// ClusterListResponseMultiError is an error wrapping multiple validation
// errors returned by ClusterListResponse.ValidateAll() if the designated
// constraints aren't met.
type ClusterListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterListResponseMultiError) AllErrors() []error { return m }

// ClusterListResponseValidationError is the validation error returned by
// ClusterListResponse.Validate if the designated constraints aren't met.
type ClusterListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterListResponseValidationError) ErrorName() string {
	return "ClusterListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterListResponseValidationError{}

// Validate checks the field values on ClusterCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterCreateRequestMultiError, or nil if none found.
func (m *ClusterCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) < 1 {
		err := ClusterCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetKubeConfig()) < 1 {
		err := ClusterCreateRequestValidationError{
			field:  "KubeConfig",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	if len(errors) > 0 {
		return ClusterCreateRequestMultiError(errors)
	}

	return nil
}

// ClusterCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ClusterCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ClusterCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterCreateRequestMultiError) AllErrors() []error { return m }

// ClusterCreateRequestValidationError is the validation error returned by
// ClusterCreateRequest.Validate if the designated constraints aren't met.
type ClusterCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterCreateRequestValidationError) ErrorName() string {
	return "ClusterCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterCreateRequestValidationError{}

// Validate checks the field values on ClusterCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterCreateResponseMultiError, or nil if none found.
func (m *ClusterCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return ClusterCreateResponseMultiError(errors)
	}

	return nil
}

// ClusterCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ClusterCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ClusterCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterCreateResponseMultiError) AllErrors() []error { return m }

// ClusterCreateResponseValidationError is the validation error returned by
// ClusterCreateResponse.Validate if the designated constraints aren't met.
type ClusterCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterCreateResponseValidationError) ErrorName() string {
	return "ClusterCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterCreateResponseValidationError{}

// Validate checks the field values on ClusterShowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterShowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterShowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterShowRequestMultiError, or nil if none found.
func (m *ClusterShowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterShowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := ClusterShowRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClusterShowRequestMultiError(errors)
	}

	return nil
}

// ClusterShowRequestMultiError is an error wrapping multiple validation errors
// returned by ClusterShowRequest.ValidateAll() if the designated constraints
// aren't met.
type ClusterShowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterShowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterShowRequestMultiError) AllErrors() []error { return m }

// ClusterShowRequestValidationError is the validation error returned by
// ClusterShowRequest.Validate if the designated constraints aren't met.
type ClusterShowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterShowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterShowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterShowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterShowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterShowRequestValidationError) ErrorName() string {
	return "ClusterShowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterShowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterShowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterShowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterShowRequestValidationError{}

// Validate checks the field values on ClusterShowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterShowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterShowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterShowResponseMultiError, or nil if none found.
func (m *ClusterShowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterShowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for KubeConfig

	// no validation rules for ApiServerUrl

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterShowResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterShowResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterShowResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterShowResponseMultiError(errors)
	}

	return nil
}

// ClusterShowResponseMultiError is an error wrapping multiple validation
// errors returned by ClusterShowResponse.ValidateAll() if the designated
// constraints aren't met.
type ClusterShowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterShowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterShowResponseMultiError) AllErrors() []error { return m }

// ClusterShowResponseValidationError is the validation error returned by
// ClusterShowResponse.Validate if the designated constraints aren't met.
type ClusterShowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterShowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterShowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterShowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterShowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterShowResponseValidationError) ErrorName() string {
	return "ClusterShowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterShowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterShowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterShowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterShowResponseValidationError{}

// Validate checks the field values on ClusterItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterItemMultiError, or
// nil if none found.
func (m *ClusterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Enabled

	// no validation rules for ClusterId

	// no validation rules for CardId

	if len(errors) > 0 {
		return ClusterItemMultiError(errors)
	}

	return nil
}

// ClusterItemMultiError is an error wrapping multiple validation errors
// returned by ClusterItem.ValidateAll() if the designated constraints aren't met.
type ClusterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterItemMultiError) AllErrors() []error { return m }

// ClusterItemValidationError is the validation error returned by
// ClusterItem.Validate if the designated constraints aren't met.
type ClusterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterItemValidationError) ErrorName() string { return "ClusterItemValidationError" }

// Error satisfies the builtin error interface
func (e ClusterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterItemValidationError{}

// Validate checks the field values on ClusterItems with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterItems with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterItemsMultiError, or
// nil if none found.
func (m *ClusterItems) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterItemsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterItemsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterItemsValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterItemsMultiError(errors)
	}

	return nil
}

// ClusterItemsMultiError is an error wrapping multiple validation errors
// returned by ClusterItems.ValidateAll() if the designated constraints aren't met.
type ClusterItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterItemsMultiError) AllErrors() []error { return m }

// ClusterItemsValidationError is the validation error returned by
// ClusterItems.Validate if the designated constraints aren't met.
type ClusterItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterItemsValidationError) ErrorName() string { return "ClusterItemsValidationError" }

// Error satisfies the builtin error interface
func (e ClusterItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterItemsValidationError{}

// Validate checks the field values on ClusterDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterDeleteRequestMultiError, or nil if none found.
func (m *ClusterDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := ClusterDeleteRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClusterDeleteRequestMultiError(errors)
	}

	return nil
}

// ClusterDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ClusterDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ClusterDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterDeleteRequestMultiError) AllErrors() []error { return m }

// ClusterDeleteRequestValidationError is the validation error returned by
// ClusterDeleteRequest.Validate if the designated constraints aren't met.
type ClusterDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterDeleteRequestValidationError) ErrorName() string {
	return "ClusterDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterDeleteRequestValidationError{}

// Validate checks the field values on ClusterDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterDeleteResponseMultiError, or nil if none found.
func (m *ClusterDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ClusterDeleteResponseMultiError(errors)
	}

	return nil
}

// ClusterDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ClusterDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ClusterDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterDeleteResponseMultiError) AllErrors() []error { return m }

// ClusterDeleteResponseValidationError is the validation error returned by
// ClusterDeleteResponse.Validate if the designated constraints aren't met.
type ClusterDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterDeleteResponseValidationError) ErrorName() string {
	return "ClusterDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterDeleteResponseValidationError{}
