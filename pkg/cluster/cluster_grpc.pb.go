// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: cluster/cluster.proto

package cluster

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterSvcClient is the client API for ClusterSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterSvcClient interface {
	List(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error)
	Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*ClusterCreateResponse, error)
	Show(ctx context.Context, in *ClusterShowRequest, opts ...grpc.CallOption) (*ClusterShowResponse, error)
	Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*ClusterDeleteResponse, error)
}

type clusterSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterSvcClient(cc grpc.ClientConnInterface) ClusterSvcClient {
	return &clusterSvcClient{cc}
}

func (c *clusterSvcClient) List(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error) {
	out := new(ClusterListResponse)
	err := c.cc.Invoke(ctx, "/ClusterSvc/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterSvcClient) Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*ClusterCreateResponse, error) {
	out := new(ClusterCreateResponse)
	err := c.cc.Invoke(ctx, "/ClusterSvc/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterSvcClient) Show(ctx context.Context, in *ClusterShowRequest, opts ...grpc.CallOption) (*ClusterShowResponse, error) {
	out := new(ClusterShowResponse)
	err := c.cc.Invoke(ctx, "/ClusterSvc/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterSvcClient) Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*ClusterDeleteResponse, error) {
	out := new(ClusterDeleteResponse)
	err := c.cc.Invoke(ctx, "/ClusterSvc/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterSvcServer is the server API for ClusterSvc service.
// All implementations must embed UnimplementedClusterSvcServer
// for forward compatibility
type ClusterSvcServer interface {
	List(context.Context, *ClusterListRequest) (*ClusterListResponse, error)
	Create(context.Context, *ClusterCreateRequest) (*ClusterCreateResponse, error)
	Show(context.Context, *ClusterShowRequest) (*ClusterShowResponse, error)
	Delete(context.Context, *ClusterDeleteRequest) (*ClusterDeleteResponse, error)
	mustEmbedUnimplementedClusterSvcServer()
}

// UnimplementedClusterSvcServer must be embedded to have forward compatible implementations.
type UnimplementedClusterSvcServer struct {
}

func (UnimplementedClusterSvcServer) List(context.Context, *ClusterListRequest) (*ClusterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedClusterSvcServer) Create(context.Context, *ClusterCreateRequest) (*ClusterCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedClusterSvcServer) Show(context.Context, *ClusterShowRequest) (*ClusterShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedClusterSvcServer) Delete(context.Context, *ClusterDeleteRequest) (*ClusterDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedClusterSvcServer) mustEmbedUnimplementedClusterSvcServer() {}

// UnsafeClusterSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterSvcServer will
// result in compilation errors.
type UnsafeClusterSvcServer interface {
	mustEmbedUnimplementedClusterSvcServer()
}

func RegisterClusterSvcServer(s grpc.ServiceRegistrar, srv ClusterSvcServer) {
	s.RegisterService(&ClusterSvc_ServiceDesc, srv)
}

func _ClusterSvc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterSvcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClusterSvc/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterSvcServer).List(ctx, req.(*ClusterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterSvc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterSvcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClusterSvc/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterSvcServer).Create(ctx, req.(*ClusterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterSvc_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterSvcServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClusterSvc/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterSvcServer).Show(ctx, req.(*ClusterShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterSvc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterSvcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClusterSvc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterSvcServer).Delete(ctx, req.(*ClusterDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterSvc_ServiceDesc is the grpc.ServiceDesc for ClusterSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClusterSvc",
	HandlerType: (*ClusterSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ClusterSvc_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ClusterSvc_Create_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _ClusterSvc_Show_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClusterSvc_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster/cluster.proto",
}
