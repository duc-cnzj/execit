// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/auth.proto

package auth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLoginRequestMultiError, or nil if none found.
func (m *AuthLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetUsername()) < 1 {
		err := AuthLoginRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPassword()) < 1 {
		err := AuthLoginRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthLoginRequestMultiError(errors)
	}

	return nil
}

// AuthLoginRequestMultiError is an error wrapping multiple validation errors
// returned by AuthLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLoginRequestMultiError) AllErrors() []error { return m }

// AuthLoginRequestValidationError is the validation error returned by
// AuthLoginRequest.Validate if the designated constraints aren't met.
type AuthLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLoginRequestValidationError) ErrorName() string { return "AuthLoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLoginRequestValidationError{}

// Validate checks the field values on AuthLoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLoginResponseMultiError, or nil if none found.
func (m *AuthLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return AuthLoginResponseMultiError(errors)
	}

	return nil
}

// AuthLoginResponseMultiError is an error wrapping multiple validation errors
// returned by AuthLoginResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLoginResponseMultiError) AllErrors() []error { return m }

// AuthLoginResponseValidationError is the validation error returned by
// AuthLoginResponse.Validate if the designated constraints aren't met.
type AuthLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLoginResponseValidationError) ErrorName() string {
	return "AuthLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLoginResponseValidationError{}

// Validate checks the field values on AuthExchangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthExchangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthExchangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthExchangeRequestMultiError, or nil if none found.
func (m *AuthExchangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthExchangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetCode()) < 1 {
		err := AuthExchangeRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthExchangeRequestMultiError(errors)
	}

	return nil
}

// AuthExchangeRequestMultiError is an error wrapping multiple validation
// errors returned by AuthExchangeRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthExchangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthExchangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthExchangeRequestMultiError) AllErrors() []error { return m }

// AuthExchangeRequestValidationError is the validation error returned by
// AuthExchangeRequest.Validate if the designated constraints aren't met.
type AuthExchangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthExchangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthExchangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthExchangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthExchangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthExchangeRequestValidationError) ErrorName() string {
	return "AuthExchangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthExchangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthExchangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthExchangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthExchangeRequestValidationError{}

// Validate checks the field values on AuthExchangeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthExchangeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthExchangeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthExchangeResponseMultiError, or nil if none found.
func (m *AuthExchangeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthExchangeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return AuthExchangeResponseMultiError(errors)
	}

	return nil
}

// AuthExchangeResponseMultiError is an error wrapping multiple validation
// errors returned by AuthExchangeResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthExchangeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthExchangeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthExchangeResponseMultiError) AllErrors() []error { return m }

// AuthExchangeResponseValidationError is the validation error returned by
// AuthExchangeResponse.Validate if the designated constraints aren't met.
type AuthExchangeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthExchangeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthExchangeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthExchangeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthExchangeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthExchangeResponseValidationError) ErrorName() string {
	return "AuthExchangeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthExchangeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthExchangeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthExchangeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthExchangeResponseValidationError{}

// Validate checks the field values on AuthInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthInfoRequestMultiError, or nil if none found.
func (m *AuthInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthInfoRequestMultiError(errors)
	}

	return nil
}

// AuthInfoRequestMultiError is an error wrapping multiple validation errors
// returned by AuthInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthInfoRequestMultiError) AllErrors() []error { return m }

// AuthInfoRequestValidationError is the validation error returned by
// AuthInfoRequest.Validate if the designated constraints aren't met.
type AuthInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthInfoRequestValidationError) ErrorName() string { return "AuthInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthInfoRequestValidationError{}

// Validate checks the field values on AuthInfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthInfoResponseMultiError, or nil if none found.
func (m *AuthInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Avatar

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for LogoutUrl

	if len(errors) > 0 {
		return AuthInfoResponseMultiError(errors)
	}

	return nil
}

// AuthInfoResponseMultiError is an error wrapping multiple validation errors
// returned by AuthInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthInfoResponseMultiError) AllErrors() []error { return m }

// AuthInfoResponseValidationError is the validation error returned by
// AuthInfoResponse.Validate if the designated constraints aren't met.
type AuthInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthInfoResponseValidationError) ErrorName() string { return "AuthInfoResponseValidationError" }

// Error satisfies the builtin error interface
func (e AuthInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthInfoResponseValidationError{}

// Validate checks the field values on AuthSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthSettingsRequestMultiError, or nil if none found.
func (m *AuthSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthSettingsRequestMultiError(errors)
	}

	return nil
}

// AuthSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by AuthSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthSettingsRequestMultiError) AllErrors() []error { return m }

// AuthSettingsRequestValidationError is the validation error returned by
// AuthSettingsRequest.Validate if the designated constraints aren't met.
type AuthSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthSettingsRequestValidationError) ErrorName() string {
	return "AuthSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthSettingsRequestValidationError{}

// Validate checks the field values on AuthSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthSettingsResponseMultiError, or nil if none found.
func (m *AuthSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthSettingsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthSettingsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthSettingsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AuthSettingsResponseMultiError(errors)
	}

	return nil
}

// AuthSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by AuthSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthSettingsResponseMultiError) AllErrors() []error { return m }

// AuthSettingsResponseValidationError is the validation error returned by
// AuthSettingsResponse.Validate if the designated constraints aren't met.
type AuthSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthSettingsResponseValidationError) ErrorName() string {
	return "AuthSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthSettingsResponseValidationError{}

// Validate checks the field values on AuthSettingsResponse_OidcSetting with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AuthSettingsResponse_OidcSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthSettingsResponse_OidcSetting with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthSettingsResponse_OidcSettingMultiError, or nil if none found.
func (m *AuthSettingsResponse_OidcSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthSettingsResponse_OidcSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for EndSessionEndpoint

	// no validation rules for State

	if len(errors) > 0 {
		return AuthSettingsResponse_OidcSettingMultiError(errors)
	}

	return nil
}

// AuthSettingsResponse_OidcSettingMultiError is an error wrapping multiple
// validation errors returned by
// AuthSettingsResponse_OidcSetting.ValidateAll() if the designated
// constraints aren't met.
type AuthSettingsResponse_OidcSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthSettingsResponse_OidcSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthSettingsResponse_OidcSettingMultiError) AllErrors() []error { return m }

// AuthSettingsResponse_OidcSettingValidationError is the validation error
// returned by AuthSettingsResponse_OidcSetting.Validate if the designated
// constraints aren't met.
type AuthSettingsResponse_OidcSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthSettingsResponse_OidcSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthSettingsResponse_OidcSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthSettingsResponse_OidcSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthSettingsResponse_OidcSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthSettingsResponse_OidcSettingValidationError) ErrorName() string {
	return "AuthSettingsResponse_OidcSettingValidationError"
}

// Error satisfies the builtin error interface
func (e AuthSettingsResponse_OidcSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthSettingsResponse_OidcSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthSettingsResponse_OidcSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthSettingsResponse_OidcSettingValidationError{}
