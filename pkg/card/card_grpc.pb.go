// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: card/card.proto

package card

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardSvcClient is the client API for CardSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardSvcClient interface {
	All(ctx context.Context, in *AllRequest, opts ...grpc.CallOption) (*AllResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Show(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ShowResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	AllContainers(ctx context.Context, in *AllContainersRequest, opts ...grpc.CallOption) (*AllContainersResponse, error)
}

type cardSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCardSvcClient(cc grpc.ClientConnInterface) CardSvcClient {
	return &cardSvcClient{cc}
}

func (c *cardSvcClient) All(ctx context.Context, in *AllRequest, opts ...grpc.CallOption) (*AllResponse, error) {
	out := new(AllResponse)
	err := c.cc.Invoke(ctx, "/card.CardSvc/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardSvcClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/card.CardSvc/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardSvcClient) Show(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ShowResponse, error) {
	out := new(ShowResponse)
	err := c.cc.Invoke(ctx, "/card.CardSvc/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardSvcClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/card.CardSvc/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardSvcClient) AllContainers(ctx context.Context, in *AllContainersRequest, opts ...grpc.CallOption) (*AllContainersResponse, error) {
	out := new(AllContainersResponse)
	err := c.cc.Invoke(ctx, "/card.CardSvc/AllContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardSvcServer is the server API for CardSvc service.
// All implementations must embed UnimplementedCardSvcServer
// for forward compatibility
type CardSvcServer interface {
	All(context.Context, *AllRequest) (*AllResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Show(context.Context, *ShowRequest) (*ShowResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	AllContainers(context.Context, *AllContainersRequest) (*AllContainersResponse, error)
	mustEmbedUnimplementedCardSvcServer()
}

// UnimplementedCardSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCardSvcServer struct {
}

func (UnimplementedCardSvcServer) All(context.Context, *AllRequest) (*AllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedCardSvcServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCardSvcServer) Show(context.Context, *ShowRequest) (*ShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedCardSvcServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCardSvcServer) AllContainers(context.Context, *AllContainersRequest) (*AllContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllContainers not implemented")
}
func (UnimplementedCardSvcServer) mustEmbedUnimplementedCardSvcServer() {}

// UnsafeCardSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardSvcServer will
// result in compilation errors.
type UnsafeCardSvcServer interface {
	mustEmbedUnimplementedCardSvcServer()
}

func RegisterCardSvcServer(s grpc.ServiceRegistrar, srv CardSvcServer) {
	s.RegisterService(&CardSvc_ServiceDesc, srv)
}

func _CardSvc_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardSvcServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.CardSvc/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardSvcServer).All(ctx, req.(*AllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardSvc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardSvcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.CardSvc/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardSvcServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardSvc_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardSvcServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.CardSvc/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardSvcServer).Show(ctx, req.(*ShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardSvc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardSvcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.CardSvc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardSvcServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardSvc_AllContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardSvcServer).AllContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.CardSvc/AllContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardSvcServer).AllContainers(ctx, req.(*AllContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardSvc_ServiceDesc is the grpc.ServiceDesc for CardSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card.CardSvc",
	HandlerType: (*CardSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "All",
			Handler:    _CardSvc_All_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CardSvc_Create_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _CardSvc_Show_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CardSvc_Delete_Handler,
		},
		{
			MethodName: "AllContainers",
			Handler:    _CardSvc_AllContainers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card/card.proto",
}
