// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: card/card.proto

package card

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CardAllRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CardAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardAllRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CardAllRequestMultiError,
// or nil if none found.
func (m *CardAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CardAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CardAllRequestMultiError(errors)
	}

	return nil
}

// CardAllRequestMultiError is an error wrapping multiple validation errors
// returned by CardAllRequest.ValidateAll() if the designated constraints
// aren't met.
type CardAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardAllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardAllRequestMultiError) AllErrors() []error { return m }

// CardAllRequestValidationError is the validation error returned by
// CardAllRequest.Validate if the designated constraints aren't met.
type CardAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardAllRequestValidationError) ErrorName() string { return "CardAllRequestValidationError" }

// Error satisfies the builtin error interface
func (e CardAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardAllRequestValidationError{}

// Validate checks the field values on CardAllResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CardAllResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardAllResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CardAllResponseMultiError, or nil if none found.
func (m *CardAllResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CardAllResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CardAllResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CardAllResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CardAllResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CardAllResponseMultiError(errors)
	}

	return nil
}

// CardAllResponseMultiError is an error wrapping multiple validation errors
// returned by CardAllResponse.ValidateAll() if the designated constraints
// aren't met.
type CardAllResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardAllResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardAllResponseMultiError) AllErrors() []error { return m }

// CardAllResponseValidationError is the validation error returned by
// CardAllResponse.Validate if the designated constraints aren't met.
type CardAllResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardAllResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardAllResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardAllResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardAllResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardAllResponseValidationError) ErrorName() string { return "CardAllResponseValidationError" }

// Error satisfies the builtin error interface
func (e CardAllResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardAllResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardAllResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardAllResponseValidationError{}

// Validate checks the field values on CardListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CardListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CardListRequestMultiError, or nil if none found.
func (m *CardListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CardListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := CardListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := CardListRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CardListRequestMultiError(errors)
	}

	return nil
}

// CardListRequestMultiError is an error wrapping multiple validation errors
// returned by CardListRequest.ValidateAll() if the designated constraints
// aren't met.
type CardListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardListRequestMultiError) AllErrors() []error { return m }

// CardListRequestValidationError is the validation error returned by
// CardListRequest.Validate if the designated constraints aren't met.
type CardListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardListRequestValidationError) ErrorName() string { return "CardListRequestValidationError" }

// Error satisfies the builtin error interface
func (e CardListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardListRequestValidationError{}

// Validate checks the field values on CardItems with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CardItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardItems with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CardItemsMultiError, or nil
// if none found.
func (m *CardItems) ValidateAll() error {
	return m.validate(true)
}

func (m *CardItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ClusterId

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for ClusterName

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CardItemsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CardItemsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CardItemsValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CardItemsMultiError(errors)
	}

	return nil
}

// CardItemsMultiError is an error wrapping multiple validation errors returned
// by CardItems.ValidateAll() if the designated constraints aren't met.
type CardItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardItemsMultiError) AllErrors() []error { return m }

// CardItemsValidationError is the validation error returned by
// CardItems.Validate if the designated constraints aren't met.
type CardItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardItemsValidationError) ErrorName() string { return "CardItemsValidationError" }

// Error satisfies the builtin error interface
func (e CardItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardItemsValidationError{}

// Validate checks the field values on CardItemsList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CardItemsList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardItemsList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CardItemsListMultiError, or
// nil if none found.
func (m *CardItemsList) ValidateAll() error {
	return m.validate(true)
}

func (m *CardItemsList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for Namespace

	// no validation rules for ClusterName

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CardItemsListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CardItemsListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CardItemsListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CardItemsListMultiError(errors)
	}

	return nil
}

// CardItemsListMultiError is an error wrapping multiple validation errors
// returned by CardItemsList.ValidateAll() if the designated constraints
// aren't met.
type CardItemsListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardItemsListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardItemsListMultiError) AllErrors() []error { return m }

// CardItemsListValidationError is the validation error returned by
// CardItemsList.Validate if the designated constraints aren't met.
type CardItemsListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardItemsListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardItemsListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardItemsListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardItemsListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardItemsListValidationError) ErrorName() string { return "CardItemsListValidationError" }

// Error satisfies the builtin error interface
func (e CardItemsListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardItemsList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardItemsListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardItemsListValidationError{}

// Validate checks the field values on CardListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CardListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CardListResponseMultiError, or nil if none found.
func (m *CardListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CardListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Count

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CardListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CardListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CardListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CardListResponseMultiError(errors)
	}

	return nil
}

// CardListResponseMultiError is an error wrapping multiple validation errors
// returned by CardListResponse.ValidateAll() if the designated constraints
// aren't met.
type CardListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardListResponseMultiError) AllErrors() []error { return m }

// CardListResponseValidationError is the validation error returned by
// CardListResponse.Validate if the designated constraints aren't met.
type CardListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardListResponseValidationError) ErrorName() string { return "CardListResponseValidationError" }

// Error satisfies the builtin error interface
func (e CardListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardListResponseValidationError{}

// Validate checks the field values on CardCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CardCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CardCreateRequestMultiError, or nil if none found.
func (m *CardCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CardCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := CardCreateRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNamespace()) < 1 {
		err := CardCreateRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetName()) < 1 {
		err := CardCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetType()) < 1 {
		err := CardCreateRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CardCreateRequestMultiError(errors)
	}

	return nil
}

// CardCreateRequestMultiError is an error wrapping multiple validation errors
// returned by CardCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type CardCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardCreateRequestMultiError) AllErrors() []error { return m }

// CardCreateRequestValidationError is the validation error returned by
// CardCreateRequest.Validate if the designated constraints aren't met.
type CardCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardCreateRequestValidationError) ErrorName() string {
	return "CardCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CardCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardCreateRequestValidationError{}

// Validate checks the field values on CardCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CardCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CardCreateResponseMultiError, or nil if none found.
func (m *CardCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CardCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for ClusterId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return CardCreateResponseMultiError(errors)
	}

	return nil
}

// CardCreateResponseMultiError is an error wrapping multiple validation errors
// returned by CardCreateResponse.ValidateAll() if the designated constraints
// aren't met.
type CardCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardCreateResponseMultiError) AllErrors() []error { return m }

// CardCreateResponseValidationError is the validation error returned by
// CardCreateResponse.Validate if the designated constraints aren't met.
type CardCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardCreateResponseValidationError) ErrorName() string {
	return "CardCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CardCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardCreateResponseValidationError{}

// Validate checks the field values on CardShowRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CardShowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardShowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CardShowRequestMultiError, or nil if none found.
func (m *CardShowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CardShowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCardId() <= 0 {
		err := CardShowRequestValidationError{
			field:  "CardId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CardShowRequestMultiError(errors)
	}

	return nil
}

// CardShowRequestMultiError is an error wrapping multiple validation errors
// returned by CardShowRequest.ValidateAll() if the designated constraints
// aren't met.
type CardShowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardShowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardShowRequestMultiError) AllErrors() []error { return m }

// CardShowRequestValidationError is the validation error returned by
// CardShowRequest.Validate if the designated constraints aren't met.
type CardShowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardShowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardShowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardShowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardShowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardShowRequestValidationError) ErrorName() string { return "CardShowRequestValidationError" }

// Error satisfies the builtin error interface
func (e CardShowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardShowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardShowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardShowRequestValidationError{}

// Validate checks the field values on CardShowResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CardShowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardShowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CardShowResponseMultiError, or nil if none found.
func (m *CardShowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CardShowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for ClusterId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CardShowResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CardShowResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CardShowResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CardShowResponseMultiError(errors)
	}

	return nil
}

// CardShowResponseMultiError is an error wrapping multiple validation errors
// returned by CardShowResponse.ValidateAll() if the designated constraints
// aren't met.
type CardShowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardShowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardShowResponseMultiError) AllErrors() []error { return m }

// CardShowResponseValidationError is the validation error returned by
// CardShowResponse.Validate if the designated constraints aren't met.
type CardShowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardShowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardShowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardShowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardShowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardShowResponseValidationError) ErrorName() string { return "CardShowResponseValidationError" }

// Error satisfies the builtin error interface
func (e CardShowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardShowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardShowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardShowResponseValidationError{}

// Validate checks the field values on CardDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CardDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CardDeleteRequestMultiError, or nil if none found.
func (m *CardDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CardDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCardId() <= 0 {
		err := CardDeleteRequestValidationError{
			field:  "CardId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CardDeleteRequestMultiError(errors)
	}

	return nil
}

// CardDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by CardDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type CardDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardDeleteRequestMultiError) AllErrors() []error { return m }

// CardDeleteRequestValidationError is the validation error returned by
// CardDeleteRequest.Validate if the designated constraints aren't met.
type CardDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardDeleteRequestValidationError) ErrorName() string {
	return "CardDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CardDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardDeleteRequestValidationError{}

// Validate checks the field values on CardDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CardDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CardDeleteResponseMultiError, or nil if none found.
func (m *CardDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CardDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CardDeleteResponseMultiError(errors)
	}

	return nil
}

// CardDeleteResponseMultiError is an error wrapping multiple validation errors
// returned by CardDeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type CardDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardDeleteResponseMultiError) AllErrors() []error { return m }

// CardDeleteResponseValidationError is the validation error returned by
// CardDeleteResponse.Validate if the designated constraints aren't met.
type CardDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardDeleteResponseValidationError) ErrorName() string {
	return "CardDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CardDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardDeleteResponseValidationError{}

// Validate checks the field values on CardAllContainersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CardAllContainersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardAllContainersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CardAllContainersRequestMultiError, or nil if none found.
func (m *CardAllContainersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CardAllContainersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CardId

	if len(errors) > 0 {
		return CardAllContainersRequestMultiError(errors)
	}

	return nil
}

// CardAllContainersRequestMultiError is an error wrapping multiple validation
// errors returned by CardAllContainersRequest.ValidateAll() if the designated
// constraints aren't met.
type CardAllContainersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardAllContainersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardAllContainersRequestMultiError) AllErrors() []error { return m }

// CardAllContainersRequestValidationError is the validation error returned by
// CardAllContainersRequest.Validate if the designated constraints aren't met.
type CardAllContainersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardAllContainersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardAllContainersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardAllContainersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardAllContainersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardAllContainersRequestValidationError) ErrorName() string {
	return "CardAllContainersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CardAllContainersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardAllContainersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardAllContainersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardAllContainersRequestValidationError{}

// Validate checks the field values on CardAllContainersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CardAllContainersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardAllContainersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CardAllContainersResponseMultiError, or nil if none found.
func (m *CardAllContainersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CardAllContainersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CardAllContainersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CardAllContainersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CardAllContainersResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CardAllContainersResponseMultiError(errors)
	}

	return nil
}

// CardAllContainersResponseMultiError is an error wrapping multiple validation
// errors returned by CardAllContainersResponse.ValidateAll() if the
// designated constraints aren't met.
type CardAllContainersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardAllContainersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardAllContainersResponseMultiError) AllErrors() []error { return m }

// CardAllContainersResponseValidationError is the validation error returned by
// CardAllContainersResponse.Validate if the designated constraints aren't met.
type CardAllContainersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardAllContainersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardAllContainersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardAllContainersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardAllContainersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardAllContainersResponseValidationError) ErrorName() string {
	return "CardAllContainersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CardAllContainersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardAllContainersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardAllContainersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardAllContainersResponseValidationError{}
