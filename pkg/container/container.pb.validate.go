// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: container/container.proto

package container

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ContainerItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContainerItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerItemMultiError, or
// nil if none found.
func (m *ContainerItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for Namespace

	// no validation rules for Pod

	// no validation rules for Container

	if len(errors) > 0 {
		return ContainerItemMultiError(errors)
	}

	return nil
}

// ContainerItemMultiError is an error wrapping multiple validation errors
// returned by ContainerItem.ValidateAll() if the designated constraints
// aren't met.
type ContainerItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerItemMultiError) AllErrors() []error { return m }

// ContainerItemValidationError is the validation error returned by
// ContainerItem.Validate if the designated constraints aren't met.
type ContainerItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerItemValidationError) ErrorName() string { return "ContainerItemValidationError" }

// Error satisfies the builtin error interface
func (e ContainerItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerItemValidationError{}

// Validate checks the field values on ContainerCopyToPodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerCopyToPodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerCopyToPodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerCopyToPodRequestMultiError, or nil if none found.
func (m *ContainerCopyToPodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerCopyToPodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := ContainerCopyToPodRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFileId() <= 0 {
		err := ContainerCopyToPodRequestValidationError{
			field:  "FileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNamespace()) < 1 {
		err := ContainerCopyToPodRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := ContainerCopyToPodRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContainer()) < 1 {
		err := ContainerCopyToPodRequestValidationError{
			field:  "Container",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ContainerCopyToPodRequestMultiError(errors)
	}

	return nil
}

// ContainerCopyToPodRequestMultiError is an error wrapping multiple validation
// errors returned by ContainerCopyToPodRequest.ValidateAll() if the
// designated constraints aren't met.
type ContainerCopyToPodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerCopyToPodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerCopyToPodRequestMultiError) AllErrors() []error { return m }

// ContainerCopyToPodRequestValidationError is the validation error returned by
// ContainerCopyToPodRequest.Validate if the designated constraints aren't met.
type ContainerCopyToPodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerCopyToPodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerCopyToPodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerCopyToPodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerCopyToPodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerCopyToPodRequestValidationError) ErrorName() string {
	return "ContainerCopyToPodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerCopyToPodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerCopyToPodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerCopyToPodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerCopyToPodRequestValidationError{}

// Validate checks the field values on ContainerCopyToPodResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerCopyToPodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerCopyToPodResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerCopyToPodResponseMultiError, or nil if none found.
func (m *ContainerCopyToPodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerCopyToPodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PodFilePath

	// no validation rules for Output

	// no validation rules for FileName

	if len(errors) > 0 {
		return ContainerCopyToPodResponseMultiError(errors)
	}

	return nil
}

// ContainerCopyToPodResponseMultiError is an error wrapping multiple
// validation errors returned by ContainerCopyToPodResponse.ValidateAll() if
// the designated constraints aren't met.
type ContainerCopyToPodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerCopyToPodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerCopyToPodResponseMultiError) AllErrors() []error { return m }

// ContainerCopyToPodResponseValidationError is the validation error returned
// by ContainerCopyToPodResponse.Validate if the designated constraints aren't met.
type ContainerCopyToPodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerCopyToPodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerCopyToPodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerCopyToPodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerCopyToPodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerCopyToPodResponseValidationError) ErrorName() string {
	return "ContainerCopyToPodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerCopyToPodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerCopyToPodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerCopyToPodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerCopyToPodResponseValidationError{}

// Validate checks the field values on ContainerExecRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerExecRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerExecRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerExecRequestMultiError, or nil if none found.
func (m *ContainerExecRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerExecRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := ContainerExecRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNamespace()) < 1 {
		err := ContainerExecRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := ContainerExecRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Container

	if len(m.GetCommand()) < 1 {
		err := ContainerExecRequestValidationError{
			field:  "Command",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCommand() {
		_, _ = idx, item

		if len(item) < 1 {
			err := ContainerExecRequestValidationError{
				field:  fmt.Sprintf("Command[%v]", idx),
				reason: "value length must be at least 1 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ContainerExecRequestMultiError(errors)
	}

	return nil
}

// ContainerExecRequestMultiError is an error wrapping multiple validation
// errors returned by ContainerExecRequest.ValidateAll() if the designated
// constraints aren't met.
type ContainerExecRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerExecRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerExecRequestMultiError) AllErrors() []error { return m }

// ContainerExecRequestValidationError is the validation error returned by
// ContainerExecRequest.Validate if the designated constraints aren't met.
type ContainerExecRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerExecRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerExecRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerExecRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerExecRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerExecRequestValidationError) ErrorName() string {
	return "ContainerExecRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerExecRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerExecRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerExecRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerExecRequestValidationError{}

// Validate checks the field values on ContainerExecResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerExecResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerExecResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerExecResponseMultiError, or nil if none found.
func (m *ContainerExecResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerExecResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ContainerExecResponseMultiError(errors)
	}

	return nil
}

// ContainerExecResponseMultiError is an error wrapping multiple validation
// errors returned by ContainerExecResponse.ValidateAll() if the designated
// constraints aren't met.
type ContainerExecResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerExecResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerExecResponseMultiError) AllErrors() []error { return m }

// ContainerExecResponseValidationError is the validation error returned by
// ContainerExecResponse.Validate if the designated constraints aren't met.
type ContainerExecResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerExecResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerExecResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerExecResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerExecResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerExecResponseValidationError) ErrorName() string {
	return "ContainerExecResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerExecResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerExecResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerExecResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerExecResponseValidationError{}

// Validate checks the field values on ContainerStreamCopyToPodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerStreamCopyToPodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerStreamCopyToPodRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ContainerStreamCopyToPodRequestMultiError, or nil if none found.
func (m *ContainerStreamCopyToPodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerStreamCopyToPodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := ContainerStreamCopyToPodRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetFileName()) < 1 {
		err := ContainerStreamCopyToPodRequestValidationError{
			field:  "FileName",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Data

	if len(m.GetNamespace()) < 1 {
		err := ContainerStreamCopyToPodRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := ContainerStreamCopyToPodRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Container

	if len(errors) > 0 {
		return ContainerStreamCopyToPodRequestMultiError(errors)
	}

	return nil
}

// ContainerStreamCopyToPodRequestMultiError is an error wrapping multiple
// validation errors returned by ContainerStreamCopyToPodRequest.ValidateAll()
// if the designated constraints aren't met.
type ContainerStreamCopyToPodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerStreamCopyToPodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerStreamCopyToPodRequestMultiError) AllErrors() []error { return m }

// ContainerStreamCopyToPodRequestValidationError is the validation error
// returned by ContainerStreamCopyToPodRequest.Validate if the designated
// constraints aren't met.
type ContainerStreamCopyToPodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerStreamCopyToPodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerStreamCopyToPodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerStreamCopyToPodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerStreamCopyToPodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerStreamCopyToPodRequestValidationError) ErrorName() string {
	return "ContainerStreamCopyToPodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerStreamCopyToPodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerStreamCopyToPodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerStreamCopyToPodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerStreamCopyToPodRequestValidationError{}

// Validate checks the field values on ContainerStreamCopyToPodResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ContainerStreamCopyToPodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerStreamCopyToPodResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ContainerStreamCopyToPodResponseMultiError, or nil if none found.
func (m *ContainerStreamCopyToPodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerStreamCopyToPodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for PodFilePath

	// no validation rules for Output

	// no validation rules for Pod

	// no validation rules for Namespace

	// no validation rules for Container

	// no validation rules for Filename

	if len(errors) > 0 {
		return ContainerStreamCopyToPodResponseMultiError(errors)
	}

	return nil
}

// ContainerStreamCopyToPodResponseMultiError is an error wrapping multiple
// validation errors returned by
// ContainerStreamCopyToPodResponse.ValidateAll() if the designated
// constraints aren't met.
type ContainerStreamCopyToPodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerStreamCopyToPodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerStreamCopyToPodResponseMultiError) AllErrors() []error { return m }

// ContainerStreamCopyToPodResponseValidationError is the validation error
// returned by ContainerStreamCopyToPodResponse.Validate if the designated
// constraints aren't met.
type ContainerStreamCopyToPodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerStreamCopyToPodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerStreamCopyToPodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerStreamCopyToPodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerStreamCopyToPodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerStreamCopyToPodResponseValidationError) ErrorName() string {
	return "ContainerStreamCopyToPodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerStreamCopyToPodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerStreamCopyToPodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerStreamCopyToPodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerStreamCopyToPodResponseValidationError{}

// Validate checks the field values on ContainerIsPodRunningRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerIsPodRunningRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerIsPodRunningRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerIsPodRunningRequestMultiError, or nil if none found.
func (m *ContainerIsPodRunningRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerIsPodRunningRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := ContainerIsPodRunningRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNamespace()) < 1 {
		err := ContainerIsPodRunningRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := ContainerIsPodRunningRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ContainerIsPodRunningRequestMultiError(errors)
	}

	return nil
}

// ContainerIsPodRunningRequestMultiError is an error wrapping multiple
// validation errors returned by ContainerIsPodRunningRequest.ValidateAll() if
// the designated constraints aren't met.
type ContainerIsPodRunningRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerIsPodRunningRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerIsPodRunningRequestMultiError) AllErrors() []error { return m }

// ContainerIsPodRunningRequestValidationError is the validation error returned
// by ContainerIsPodRunningRequest.Validate if the designated constraints
// aren't met.
type ContainerIsPodRunningRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerIsPodRunningRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerIsPodRunningRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerIsPodRunningRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerIsPodRunningRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerIsPodRunningRequestValidationError) ErrorName() string {
	return "ContainerIsPodRunningRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerIsPodRunningRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerIsPodRunningRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerIsPodRunningRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerIsPodRunningRequestValidationError{}

// Validate checks the field values on ContainerIsPodRunningResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerIsPodRunningResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerIsPodRunningResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ContainerIsPodRunningResponseMultiError, or nil if none found.
func (m *ContainerIsPodRunningResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerIsPodRunningResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Running

	// no validation rules for Reason

	if len(errors) > 0 {
		return ContainerIsPodRunningResponseMultiError(errors)
	}

	return nil
}

// ContainerIsPodRunningResponseMultiError is an error wrapping multiple
// validation errors returned by ContainerIsPodRunningResponse.ValidateAll()
// if the designated constraints aren't met.
type ContainerIsPodRunningResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerIsPodRunningResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerIsPodRunningResponseMultiError) AllErrors() []error { return m }

// ContainerIsPodRunningResponseValidationError is the validation error
// returned by ContainerIsPodRunningResponse.Validate if the designated
// constraints aren't met.
type ContainerIsPodRunningResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerIsPodRunningResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerIsPodRunningResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerIsPodRunningResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerIsPodRunningResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerIsPodRunningResponseValidationError) ErrorName() string {
	return "ContainerIsPodRunningResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerIsPodRunningResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerIsPodRunningResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerIsPodRunningResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerIsPodRunningResponseValidationError{}

// Validate checks the field values on ContainerIsPodExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerIsPodExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerIsPodExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerIsPodExistsRequestMultiError, or nil if none found.
func (m *ContainerIsPodExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerIsPodExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := ContainerIsPodExistsRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNamespace()) < 1 {
		err := ContainerIsPodExistsRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := ContainerIsPodExistsRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ContainerIsPodExistsRequestMultiError(errors)
	}

	return nil
}

// ContainerIsPodExistsRequestMultiError is an error wrapping multiple
// validation errors returned by ContainerIsPodExistsRequest.ValidateAll() if
// the designated constraints aren't met.
type ContainerIsPodExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerIsPodExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerIsPodExistsRequestMultiError) AllErrors() []error { return m }

// ContainerIsPodExistsRequestValidationError is the validation error returned
// by ContainerIsPodExistsRequest.Validate if the designated constraints
// aren't met.
type ContainerIsPodExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerIsPodExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerIsPodExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerIsPodExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerIsPodExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerIsPodExistsRequestValidationError) ErrorName() string {
	return "ContainerIsPodExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerIsPodExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerIsPodExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerIsPodExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerIsPodExistsRequestValidationError{}

// Validate checks the field values on ContainerIsPodExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerIsPodExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerIsPodExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerIsPodExistsResponseMultiError, or nil if none found.
func (m *ContainerIsPodExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerIsPodExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return ContainerIsPodExistsResponseMultiError(errors)
	}

	return nil
}

// ContainerIsPodExistsResponseMultiError is an error wrapping multiple
// validation errors returned by ContainerIsPodExistsResponse.ValidateAll() if
// the designated constraints aren't met.
type ContainerIsPodExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerIsPodExistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerIsPodExistsResponseMultiError) AllErrors() []error { return m }

// ContainerIsPodExistsResponseValidationError is the validation error returned
// by ContainerIsPodExistsResponse.Validate if the designated constraints
// aren't met.
type ContainerIsPodExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerIsPodExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerIsPodExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerIsPodExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerIsPodExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerIsPodExistsResponseValidationError) ErrorName() string {
	return "ContainerIsPodExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerIsPodExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerIsPodExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerIsPodExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerIsPodExistsResponseValidationError{}

// Validate checks the field values on ContainerLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerLogRequestMultiError, or nil if none found.
func (m *ContainerLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := ContainerLogRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNamespace()) < 1 {
		err := ContainerLogRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := ContainerLogRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContainer()) < 1 {
		err := ContainerLogRequestValidationError{
			field:  "Container",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ContainerLogRequestMultiError(errors)
	}

	return nil
}

// ContainerLogRequestMultiError is an error wrapping multiple validation
// errors returned by ContainerLogRequest.ValidateAll() if the designated
// constraints aren't met.
type ContainerLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerLogRequestMultiError) AllErrors() []error { return m }

// ContainerLogRequestValidationError is the validation error returned by
// ContainerLogRequest.Validate if the designated constraints aren't met.
type ContainerLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerLogRequestValidationError) ErrorName() string {
	return "ContainerLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerLogRequestValidationError{}

// Validate checks the field values on ContainerLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerLogResponseMultiError, or nil if none found.
func (m *ContainerLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for PodName

	// no validation rules for ContainerName

	// no validation rules for Log

	if len(errors) > 0 {
		return ContainerLogResponseMultiError(errors)
	}

	return nil
}

// ContainerLogResponseMultiError is an error wrapping multiple validation
// errors returned by ContainerLogResponse.ValidateAll() if the designated
// constraints aren't met.
type ContainerLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerLogResponseMultiError) AllErrors() []error { return m }

// ContainerLogResponseValidationError is the validation error returned by
// ContainerLogResponse.Validate if the designated constraints aren't met.
type ContainerLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerLogResponseValidationError) ErrorName() string {
	return "ContainerLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerLogResponseValidationError{}
