// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: container/container.proto

package container

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProxyInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProxyInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProxyInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProxyInfoMultiError, or nil
// if none found.
func (m *ProxyInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ProxyInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Port

	// no validation rules for Name

	// no validation rules for Url

	if len(errors) > 0 {
		return ProxyInfoMultiError(errors)
	}

	return nil
}

// ProxyInfoMultiError is an error wrapping multiple validation errors returned
// by ProxyInfo.ValidateAll() if the designated constraints aren't met.
type ProxyInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProxyInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProxyInfoMultiError) AllErrors() []error { return m }

// ProxyInfoValidationError is the validation error returned by
// ProxyInfo.Validate if the designated constraints aren't met.
type ProxyInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxyInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxyInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxyInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxyInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxyInfoValidationError) ErrorName() string { return "ProxyInfoValidationError" }

// Error satisfies the builtin error interface
func (e ProxyInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxyInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxyInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxyInfoValidationError{}

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Item with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ItemMultiError, or nil if none found.
func (m *Item) ValidateAll() error {
	return m.validate(true)
}

func (m *Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for Namespace

	// no validation rules for Pod

	// no validation rules for Container

	for idx, item := range m.GetProxies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemValidationError{
						field:  fmt.Sprintf("Proxies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemValidationError{
						field:  fmt.Sprintf("Proxies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemValidationError{
					field:  fmt.Sprintf("Proxies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsNew

	// no validation rules for Terminating

	if len(errors) > 0 {
		return ItemMultiError(errors)
	}

	return nil
}

// ItemMultiError is an error wrapping multiple validation errors returned by
// Item.ValidateAll() if the designated constraints aren't met.
type ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemMultiError) AllErrors() []error { return m }

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

// Validate checks the field values on CopyToPodRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CopyToPodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyToPodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyToPodRequestMultiError, or nil if none found.
func (m *CopyToPodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyToPodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := CopyToPodRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFileId() <= 0 {
		err := CopyToPodRequestValidationError{
			field:  "FileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNamespace()) < 1 {
		err := CopyToPodRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := CopyToPodRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContainer()) < 1 {
		err := CopyToPodRequestValidationError{
			field:  "Container",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CopyToPodRequestMultiError(errors)
	}

	return nil
}

// CopyToPodRequestMultiError is an error wrapping multiple validation errors
// returned by CopyToPodRequest.ValidateAll() if the designated constraints
// aren't met.
type CopyToPodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyToPodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyToPodRequestMultiError) AllErrors() []error { return m }

// CopyToPodRequestValidationError is the validation error returned by
// CopyToPodRequest.Validate if the designated constraints aren't met.
type CopyToPodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyToPodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyToPodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyToPodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyToPodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyToPodRequestValidationError) ErrorName() string { return "CopyToPodRequestValidationError" }

// Error satisfies the builtin error interface
func (e CopyToPodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyToPodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyToPodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyToPodRequestValidationError{}

// Validate checks the field values on CopyToPodResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CopyToPodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyToPodResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyToPodResponseMultiError, or nil if none found.
func (m *CopyToPodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyToPodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PodFilePath

	// no validation rules for Output

	// no validation rules for FileName

	if len(errors) > 0 {
		return CopyToPodResponseMultiError(errors)
	}

	return nil
}

// CopyToPodResponseMultiError is an error wrapping multiple validation errors
// returned by CopyToPodResponse.ValidateAll() if the designated constraints
// aren't met.
type CopyToPodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyToPodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyToPodResponseMultiError) AllErrors() []error { return m }

// CopyToPodResponseValidationError is the validation error returned by
// CopyToPodResponse.Validate if the designated constraints aren't met.
type CopyToPodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyToPodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyToPodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyToPodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyToPodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyToPodResponseValidationError) ErrorName() string {
	return "CopyToPodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CopyToPodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyToPodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyToPodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyToPodResponseValidationError{}

// Validate checks the field values on ExecRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExecRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExecRequestMultiError, or
// nil if none found.
func (m *ExecRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := ExecRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNamespace()) < 1 {
		err := ExecRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := ExecRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Container

	if len(m.GetCommand()) < 1 {
		err := ExecRequestValidationError{
			field:  "Command",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCommand() {
		_, _ = idx, item

		if len(item) < 1 {
			err := ExecRequestValidationError{
				field:  fmt.Sprintf("Command[%v]", idx),
				reason: "value length must be at least 1 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ExecRequestMultiError(errors)
	}

	return nil
}

// ExecRequestMultiError is an error wrapping multiple validation errors
// returned by ExecRequest.ValidateAll() if the designated constraints aren't met.
type ExecRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecRequestMultiError) AllErrors() []error { return m }

// ExecRequestValidationError is the validation error returned by
// ExecRequest.Validate if the designated constraints aren't met.
type ExecRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecRequestValidationError) ErrorName() string { return "ExecRequestValidationError" }

// Error satisfies the builtin error interface
func (e ExecRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecRequestValidationError{}

// Validate checks the field values on ExecResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExecResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExecResponseMultiError, or
// nil if none found.
func (m *ExecResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ExecResponseMultiError(errors)
	}

	return nil
}

// ExecResponseMultiError is an error wrapping multiple validation errors
// returned by ExecResponse.ValidateAll() if the designated constraints aren't met.
type ExecResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecResponseMultiError) AllErrors() []error { return m }

// ExecResponseValidationError is the validation error returned by
// ExecResponse.Validate if the designated constraints aren't met.
type ExecResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecResponseValidationError) ErrorName() string { return "ExecResponseValidationError" }

// Error satisfies the builtin error interface
func (e ExecResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecResponseValidationError{}

// Validate checks the field values on StreamCopyToPodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamCopyToPodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamCopyToPodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamCopyToPodRequestMultiError, or nil if none found.
func (m *StreamCopyToPodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamCopyToPodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := StreamCopyToPodRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetFileName()) < 1 {
		err := StreamCopyToPodRequestValidationError{
			field:  "FileName",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Data

	if len(m.GetNamespace()) < 1 {
		err := StreamCopyToPodRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := StreamCopyToPodRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Container

	if len(errors) > 0 {
		return StreamCopyToPodRequestMultiError(errors)
	}

	return nil
}

// StreamCopyToPodRequestMultiError is an error wrapping multiple validation
// errors returned by StreamCopyToPodRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamCopyToPodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamCopyToPodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamCopyToPodRequestMultiError) AllErrors() []error { return m }

// StreamCopyToPodRequestValidationError is the validation error returned by
// StreamCopyToPodRequest.Validate if the designated constraints aren't met.
type StreamCopyToPodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamCopyToPodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamCopyToPodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamCopyToPodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamCopyToPodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamCopyToPodRequestValidationError) ErrorName() string {
	return "StreamCopyToPodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamCopyToPodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamCopyToPodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamCopyToPodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamCopyToPodRequestValidationError{}

// Validate checks the field values on StreamCopyToPodResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamCopyToPodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamCopyToPodResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamCopyToPodResponseMultiError, or nil if none found.
func (m *StreamCopyToPodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamCopyToPodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for PodFilePath

	// no validation rules for Output

	// no validation rules for Pod

	// no validation rules for Namespace

	// no validation rules for Container

	// no validation rules for Filename

	if len(errors) > 0 {
		return StreamCopyToPodResponseMultiError(errors)
	}

	return nil
}

// StreamCopyToPodResponseMultiError is an error wrapping multiple validation
// errors returned by StreamCopyToPodResponse.ValidateAll() if the designated
// constraints aren't met.
type StreamCopyToPodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamCopyToPodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamCopyToPodResponseMultiError) AllErrors() []error { return m }

// StreamCopyToPodResponseValidationError is the validation error returned by
// StreamCopyToPodResponse.Validate if the designated constraints aren't met.
type StreamCopyToPodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamCopyToPodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamCopyToPodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamCopyToPodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamCopyToPodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamCopyToPodResponseValidationError) ErrorName() string {
	return "StreamCopyToPodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamCopyToPodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamCopyToPodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamCopyToPodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamCopyToPodResponseValidationError{}

// Validate checks the field values on IsPodRunningRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsPodRunningRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsPodRunningRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsPodRunningRequestMultiError, or nil if none found.
func (m *IsPodRunningRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsPodRunningRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := IsPodRunningRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNamespace()) < 1 {
		err := IsPodRunningRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := IsPodRunningRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsPodRunningRequestMultiError(errors)
	}

	return nil
}

// IsPodRunningRequestMultiError is an error wrapping multiple validation
// errors returned by IsPodRunningRequest.ValidateAll() if the designated
// constraints aren't met.
type IsPodRunningRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsPodRunningRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsPodRunningRequestMultiError) AllErrors() []error { return m }

// IsPodRunningRequestValidationError is the validation error returned by
// IsPodRunningRequest.Validate if the designated constraints aren't met.
type IsPodRunningRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsPodRunningRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsPodRunningRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsPodRunningRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsPodRunningRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsPodRunningRequestValidationError) ErrorName() string {
	return "IsPodRunningRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsPodRunningRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsPodRunningRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsPodRunningRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsPodRunningRequestValidationError{}

// Validate checks the field values on IsPodRunningResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsPodRunningResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsPodRunningResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsPodRunningResponseMultiError, or nil if none found.
func (m *IsPodRunningResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsPodRunningResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Running

	// no validation rules for Reason

	if len(errors) > 0 {
		return IsPodRunningResponseMultiError(errors)
	}

	return nil
}

// IsPodRunningResponseMultiError is an error wrapping multiple validation
// errors returned by IsPodRunningResponse.ValidateAll() if the designated
// constraints aren't met.
type IsPodRunningResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsPodRunningResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsPodRunningResponseMultiError) AllErrors() []error { return m }

// IsPodRunningResponseValidationError is the validation error returned by
// IsPodRunningResponse.Validate if the designated constraints aren't met.
type IsPodRunningResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsPodRunningResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsPodRunningResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsPodRunningResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsPodRunningResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsPodRunningResponseValidationError) ErrorName() string {
	return "IsPodRunningResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsPodRunningResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsPodRunningResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsPodRunningResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsPodRunningResponseValidationError{}

// Validate checks the field values on IsPodExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsPodExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsPodExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsPodExistsRequestMultiError, or nil if none found.
func (m *IsPodExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsPodExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := IsPodExistsRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNamespace()) < 1 {
		err := IsPodExistsRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := IsPodExistsRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsPodExistsRequestMultiError(errors)
	}

	return nil
}

// IsPodExistsRequestMultiError is an error wrapping multiple validation errors
// returned by IsPodExistsRequest.ValidateAll() if the designated constraints
// aren't met.
type IsPodExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsPodExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsPodExistsRequestMultiError) AllErrors() []error { return m }

// IsPodExistsRequestValidationError is the validation error returned by
// IsPodExistsRequest.Validate if the designated constraints aren't met.
type IsPodExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsPodExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsPodExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsPodExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsPodExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsPodExistsRequestValidationError) ErrorName() string {
	return "IsPodExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsPodExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsPodExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsPodExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsPodExistsRequestValidationError{}

// Validate checks the field values on IsPodExistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsPodExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsPodExistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsPodExistsResponseMultiError, or nil if none found.
func (m *IsPodExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsPodExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return IsPodExistsResponseMultiError(errors)
	}

	return nil
}

// IsPodExistsResponseMultiError is an error wrapping multiple validation
// errors returned by IsPodExistsResponse.ValidateAll() if the designated
// constraints aren't met.
type IsPodExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsPodExistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsPodExistsResponseMultiError) AllErrors() []error { return m }

// IsPodExistsResponseValidationError is the validation error returned by
// IsPodExistsResponse.Validate if the designated constraints aren't met.
type IsPodExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsPodExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsPodExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsPodExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsPodExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsPodExistsResponseValidationError) ErrorName() string {
	return "IsPodExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsPodExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsPodExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsPodExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsPodExistsResponseValidationError{}

// Validate checks the field values on LogRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogRequestMultiError, or
// nil if none found.
func (m *LogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := LogRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNamespace()) < 1 {
		err := LogRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := LogRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContainer()) < 1 {
		err := LogRequestValidationError{
			field:  "Container",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCardId() <= 0 {
		err := LogRequestValidationError{
			field:  "CardId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LogRequestMultiError(errors)
	}

	return nil
}

// LogRequestMultiError is an error wrapping multiple validation errors
// returned by LogRequest.ValidateAll() if the designated constraints aren't met.
type LogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogRequestMultiError) AllErrors() []error { return m }

// LogRequestValidationError is the validation error returned by
// LogRequest.Validate if the designated constraints aren't met.
type LogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogRequestValidationError) ErrorName() string { return "LogRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogRequestValidationError{}

// Validate checks the field values on LogResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogResponseMultiError, or
// nil if none found.
func (m *LogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for PodName

	// no validation rules for ContainerName

	// no validation rules for Log

	if len(errors) > 0 {
		return LogResponseMultiError(errors)
	}

	return nil
}

// LogResponseMultiError is an error wrapping multiple validation errors
// returned by LogResponse.ValidateAll() if the designated constraints aren't met.
type LogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogResponseMultiError) AllErrors() []error { return m }

// LogResponseValidationError is the validation error returned by
// LogResponse.Validate if the designated constraints aren't met.
type LogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogResponseValidationError) ErrorName() string { return "LogResponseValidationError" }

// Error satisfies the builtin error interface
func (e LogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogResponseValidationError{}

// Validate checks the field values on ProxyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProxyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProxyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProxyRequestMultiError, or
// nil if none found.
func (m *ProxyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProxyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClusterId() <= 0 {
		err := ProxyRequestValidationError{
			field:  "ClusterId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNamespace()) < 1 {
		err := ProxyRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPod()) < 1 {
		err := ProxyRequestValidationError{
			field:  "Pod",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPort()) < 1 {
		err := ProxyRequestValidationError{
			field:  "Port",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProxyRequestMultiError(errors)
	}

	return nil
}

// ProxyRequestMultiError is an error wrapping multiple validation errors
// returned by ProxyRequest.ValidateAll() if the designated constraints aren't met.
type ProxyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProxyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProxyRequestMultiError) AllErrors() []error { return m }

// ProxyRequestValidationError is the validation error returned by
// ProxyRequest.Validate if the designated constraints aren't met.
type ProxyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxyRequestValidationError) ErrorName() string { return "ProxyRequestValidationError" }

// Error satisfies the builtin error interface
func (e ProxyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxyRequestValidationError{}

// Validate checks the field values on ProxyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProxyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProxyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProxyResponseMultiError, or
// nil if none found.
func (m *ProxyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProxyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ProxyResponseMultiError(errors)
	}

	return nil
}

// ProxyResponseMultiError is an error wrapping multiple validation errors
// returned by ProxyResponse.ValidateAll() if the designated constraints
// aren't met.
type ProxyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProxyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProxyResponseMultiError) AllErrors() []error { return m }

// ProxyResponseValidationError is the validation error returned by
// ProxyResponse.Validate if the designated constraints aren't met.
type ProxyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxyResponseValidationError) ErrorName() string { return "ProxyResponseValidationError" }

// Error satisfies the builtin error interface
func (e ProxyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxyResponseValidationError{}
