// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: container/container.proto

package container

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContainerSvcClient is the client API for ContainerSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerSvcClient interface {
	// CopyToPod (web): 页面上传文件到 pod 内部
	CopyToPod(ctx context.Context, in *CopyToPodRequest, opts ...grpc.CallOption) (*CopyToPodResponse, error)
	// Exec grpc 执行 pod 命令
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (ContainerSvc_ExecClient, error)
	// StreamCopyToPod grpc 上传文件到 pod
	//
	//	 demo:
	//	 cp, _ := c.Container().StreamCopyToPod(context.TODO())
	//		open, _ := os.Open("/xxxxxx/helm-v3.8.0-rc.1-linux-arm64.tar.gz")
	//		defer open.Close()
	//		bf := bufio.NewReaderSize(open, 1024*1024*5)
	//		var (
	//			filename =  open.Name()
	//			pod = "execit-demo-549f789f7d-sxvqm"
	//			containerName = "demo"
	//			namespace = "devops-a"
	//		)
	//		for {
	//			bts := make([]byte, 1024*1024)
	//			n, err := bf.Read(bts)
	//			if err != nil {
	//				if err == io.EOF {
	//					cp.Send(&container.ContainerStreamCopyToPodRequest{
	//						FileName:  filename,
	//						Data:      bts[0:n],
	//						Namespace: namespace,
	//						Pod:       pod,
	//						Container: containerName,
	//					})
	//					recv, err := cp.CloseAndRecv()
	//					if err != nil {
	//						log.Fatal(err)
	//					}
	//					log.Println(recv)
	//				}
	//				return
	//			}
	//			 cp.Send(&container.ContainerStreamCopyToPodRequest{
	//				FileName:  filename,
	//				Data:      bts[0:n],
	//				Namespace: namespace,
	//				Pod:       pod,
	//				Container: containerName,
	//			 })
	//		}
	StreamCopyToPod(ctx context.Context, opts ...grpc.CallOption) (ContainerSvc_StreamCopyToPodClient, error)
	// IsPodRunning pod 是否正常在跑
	IsPodRunning(ctx context.Context, in *IsPodRunningRequest, opts ...grpc.CallOption) (*IsPodRunningResponse, error)
	// IsPodExists pod 是否存在
	IsPodExists(ctx context.Context, in *IsPodExistsRequest, opts ...grpc.CallOption) (*IsPodExistsResponse, error)
	// ContainerLog 查看 pod 日志
	ContainerLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	// StreamContainerLog stream 方式查看 pod 日志
	StreamContainerLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (ContainerSvc_StreamContainerLogClient, error)
	Proxy(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
}

type containerSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerSvcClient(cc grpc.ClientConnInterface) ContainerSvcClient {
	return &containerSvcClient{cc}
}

func (c *containerSvcClient) CopyToPod(ctx context.Context, in *CopyToPodRequest, opts ...grpc.CallOption) (*CopyToPodResponse, error) {
	out := new(CopyToPodResponse)
	err := c.cc.Invoke(ctx, "/container.ContainerSvc/CopyToPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerSvcClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (ContainerSvc_ExecClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContainerSvc_ServiceDesc.Streams[0], "/container.ContainerSvc/Exec", opts...)
	if err != nil {
		return nil, err
	}
	x := &containerSvcExecClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContainerSvc_ExecClient interface {
	Recv() (*ExecResponse, error)
	grpc.ClientStream
}

type containerSvcExecClient struct {
	grpc.ClientStream
}

func (x *containerSvcExecClient) Recv() (*ExecResponse, error) {
	m := new(ExecResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containerSvcClient) StreamCopyToPod(ctx context.Context, opts ...grpc.CallOption) (ContainerSvc_StreamCopyToPodClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContainerSvc_ServiceDesc.Streams[1], "/container.ContainerSvc/StreamCopyToPod", opts...)
	if err != nil {
		return nil, err
	}
	x := &containerSvcStreamCopyToPodClient{stream}
	return x, nil
}

type ContainerSvc_StreamCopyToPodClient interface {
	Send(*StreamCopyToPodRequest) error
	CloseAndRecv() (*StreamCopyToPodResponse, error)
	grpc.ClientStream
}

type containerSvcStreamCopyToPodClient struct {
	grpc.ClientStream
}

func (x *containerSvcStreamCopyToPodClient) Send(m *StreamCopyToPodRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *containerSvcStreamCopyToPodClient) CloseAndRecv() (*StreamCopyToPodResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamCopyToPodResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containerSvcClient) IsPodRunning(ctx context.Context, in *IsPodRunningRequest, opts ...grpc.CallOption) (*IsPodRunningResponse, error) {
	out := new(IsPodRunningResponse)
	err := c.cc.Invoke(ctx, "/container.ContainerSvc/IsPodRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerSvcClient) IsPodExists(ctx context.Context, in *IsPodExistsRequest, opts ...grpc.CallOption) (*IsPodExistsResponse, error) {
	out := new(IsPodExistsResponse)
	err := c.cc.Invoke(ctx, "/container.ContainerSvc/IsPodExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerSvcClient) ContainerLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/container.ContainerSvc/ContainerLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerSvcClient) StreamContainerLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (ContainerSvc_StreamContainerLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContainerSvc_ServiceDesc.Streams[2], "/container.ContainerSvc/StreamContainerLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &containerSvcStreamContainerLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContainerSvc_StreamContainerLogClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type containerSvcStreamContainerLogClient struct {
	grpc.ClientStream
}

func (x *containerSvcStreamContainerLogClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containerSvcClient) Proxy(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	out := new(ProxyResponse)
	err := c.cc.Invoke(ctx, "/container.ContainerSvc/Proxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerSvcServer is the server API for ContainerSvc service.
// All implementations must embed UnimplementedContainerSvcServer
// for forward compatibility
type ContainerSvcServer interface {
	// CopyToPod (web): 页面上传文件到 pod 内部
	CopyToPod(context.Context, *CopyToPodRequest) (*CopyToPodResponse, error)
	// Exec grpc 执行 pod 命令
	Exec(*ExecRequest, ContainerSvc_ExecServer) error
	// StreamCopyToPod grpc 上传文件到 pod
	//
	//	 demo:
	//	 cp, _ := c.Container().StreamCopyToPod(context.TODO())
	//		open, _ := os.Open("/xxxxxx/helm-v3.8.0-rc.1-linux-arm64.tar.gz")
	//		defer open.Close()
	//		bf := bufio.NewReaderSize(open, 1024*1024*5)
	//		var (
	//			filename =  open.Name()
	//			pod = "execit-demo-549f789f7d-sxvqm"
	//			containerName = "demo"
	//			namespace = "devops-a"
	//		)
	//		for {
	//			bts := make([]byte, 1024*1024)
	//			n, err := bf.Read(bts)
	//			if err != nil {
	//				if err == io.EOF {
	//					cp.Send(&container.ContainerStreamCopyToPodRequest{
	//						FileName:  filename,
	//						Data:      bts[0:n],
	//						Namespace: namespace,
	//						Pod:       pod,
	//						Container: containerName,
	//					})
	//					recv, err := cp.CloseAndRecv()
	//					if err != nil {
	//						log.Fatal(err)
	//					}
	//					log.Println(recv)
	//				}
	//				return
	//			}
	//			 cp.Send(&container.ContainerStreamCopyToPodRequest{
	//				FileName:  filename,
	//				Data:      bts[0:n],
	//				Namespace: namespace,
	//				Pod:       pod,
	//				Container: containerName,
	//			 })
	//		}
	StreamCopyToPod(ContainerSvc_StreamCopyToPodServer) error
	// IsPodRunning pod 是否正常在跑
	IsPodRunning(context.Context, *IsPodRunningRequest) (*IsPodRunningResponse, error)
	// IsPodExists pod 是否存在
	IsPodExists(context.Context, *IsPodExistsRequest) (*IsPodExistsResponse, error)
	// ContainerLog 查看 pod 日志
	ContainerLog(context.Context, *LogRequest) (*LogResponse, error)
	// StreamContainerLog stream 方式查看 pod 日志
	StreamContainerLog(*LogRequest, ContainerSvc_StreamContainerLogServer) error
	Proxy(context.Context, *ProxyRequest) (*ProxyResponse, error)
	mustEmbedUnimplementedContainerSvcServer()
}

// UnimplementedContainerSvcServer must be embedded to have forward compatible implementations.
type UnimplementedContainerSvcServer struct {
}

func (UnimplementedContainerSvcServer) CopyToPod(context.Context, *CopyToPodRequest) (*CopyToPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyToPod not implemented")
}
func (UnimplementedContainerSvcServer) Exec(*ExecRequest, ContainerSvc_ExecServer) error {
	return status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedContainerSvcServer) StreamCopyToPod(ContainerSvc_StreamCopyToPodServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCopyToPod not implemented")
}
func (UnimplementedContainerSvcServer) IsPodRunning(context.Context, *IsPodRunningRequest) (*IsPodRunningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPodRunning not implemented")
}
func (UnimplementedContainerSvcServer) IsPodExists(context.Context, *IsPodExistsRequest) (*IsPodExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPodExists not implemented")
}
func (UnimplementedContainerSvcServer) ContainerLog(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerLog not implemented")
}
func (UnimplementedContainerSvcServer) StreamContainerLog(*LogRequest, ContainerSvc_StreamContainerLogServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamContainerLog not implemented")
}
func (UnimplementedContainerSvcServer) Proxy(context.Context, *ProxyRequest) (*ProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}
func (UnimplementedContainerSvcServer) mustEmbedUnimplementedContainerSvcServer() {}

// UnsafeContainerSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerSvcServer will
// result in compilation errors.
type UnsafeContainerSvcServer interface {
	mustEmbedUnimplementedContainerSvcServer()
}

func RegisterContainerSvcServer(s grpc.ServiceRegistrar, srv ContainerSvcServer) {
	s.RegisterService(&ContainerSvc_ServiceDesc, srv)
}

func _ContainerSvc_CopyToPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyToPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerSvcServer).CopyToPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.ContainerSvc/CopyToPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerSvcServer).CopyToPod(ctx, req.(*CopyToPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerSvc_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerSvcServer).Exec(m, &containerSvcExecServer{stream})
}

type ContainerSvc_ExecServer interface {
	Send(*ExecResponse) error
	grpc.ServerStream
}

type containerSvcExecServer struct {
	grpc.ServerStream
}

func (x *containerSvcExecServer) Send(m *ExecResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContainerSvc_StreamCopyToPod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerSvcServer).StreamCopyToPod(&containerSvcStreamCopyToPodServer{stream})
}

type ContainerSvc_StreamCopyToPodServer interface {
	SendAndClose(*StreamCopyToPodResponse) error
	Recv() (*StreamCopyToPodRequest, error)
	grpc.ServerStream
}

type containerSvcStreamCopyToPodServer struct {
	grpc.ServerStream
}

func (x *containerSvcStreamCopyToPodServer) SendAndClose(m *StreamCopyToPodResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *containerSvcStreamCopyToPodServer) Recv() (*StreamCopyToPodRequest, error) {
	m := new(StreamCopyToPodRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContainerSvc_IsPodRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPodRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerSvcServer).IsPodRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.ContainerSvc/IsPodRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerSvcServer).IsPodRunning(ctx, req.(*IsPodRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerSvc_IsPodExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPodExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerSvcServer).IsPodExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.ContainerSvc/IsPodExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerSvcServer).IsPodExists(ctx, req.(*IsPodExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerSvc_ContainerLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerSvcServer).ContainerLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.ContainerSvc/ContainerLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerSvcServer).ContainerLog(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerSvc_StreamContainerLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerSvcServer).StreamContainerLog(m, &containerSvcStreamContainerLogServer{stream})
}

type ContainerSvc_StreamContainerLogServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type containerSvcStreamContainerLogServer struct {
	grpc.ServerStream
}

func (x *containerSvcStreamContainerLogServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContainerSvc_Proxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerSvcServer).Proxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.ContainerSvc/Proxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerSvcServer).Proxy(ctx, req.(*ProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerSvc_ServiceDesc is the grpc.ServiceDesc for ContainerSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "container.ContainerSvc",
	HandlerType: (*ContainerSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CopyToPod",
			Handler:    _ContainerSvc_CopyToPod_Handler,
		},
		{
			MethodName: "IsPodRunning",
			Handler:    _ContainerSvc_IsPodRunning_Handler,
		},
		{
			MethodName: "IsPodExists",
			Handler:    _ContainerSvc_IsPodExists_Handler,
		},
		{
			MethodName: "ContainerLog",
			Handler:    _ContainerSvc_ContainerLog_Handler,
		},
		{
			MethodName: "Proxy",
			Handler:    _ContainerSvc_Proxy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exec",
			Handler:       _ContainerSvc_Exec_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamCopyToPod",
			Handler:       _ContainerSvc_StreamCopyToPod_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamContainerLog",
			Handler:       _ContainerSvc_StreamContainerLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "container/container.proto",
}
